version: '3.7'

x-container-common:
  &container-common
  restart: ${CONTAINER_RESTART-on-failure}
  networks:
    - deps

services:
  vault:
    <<: *container-common
    image: consensys/quorum-hashicorp-vault-plugin:v1.1.4
    tty: true
    restart: "no"
    cap_add:
      - IPC_LOCK
    volumes:
      - ./vault/vault-data:/vault/file
      - ./vault/vault-token:/vault/token
      - ./vault/unseal-token:/vault/unseal-token
      - ./vault/scripts/vault-init.sh:/usr/local/bin/init.sh
    environment:
      ROOT_TOKEN_PATH: /vault/token/.root
      VAULT_ADDR: http://vault:8200
      PLUGIN_MOUNT_PATH: quorum
      PLUGIN_PATH: /vault/plugins
      KVV2_MOUNT_PATH: secret
      VAULT_IS_READY: /vault/token/.ready
    entrypoint:
      - sh
      - -c
      - |
        cat <<EOF > /vault/config.hcl
            ui = true
            backend "file" {
              path = "/vault/file"
            }
            listener "tcp" {
              address = "vault:8200"
              tls_disable = true
            }
            default_lease_ttl = "15m"
            max_lease_ttl = "30m"
            api_addr = "http://vault:8200"
            plugin_directory = "/vault/plugins"
            log_level = "Debug"
        EOF
        ( sleep 2 ; sh /usr/local/bin/init.sh && cat > $${VAULT_IS_READY}) &
        vault server -config=/vault/config.hcl
    ports:
      - 8200:8200
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "--proxy",
          "off",
          "http://vault:8200/v1/sys/health?standbyok=true"
        ]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 5s

  zookeeper:
    <<: *container-common
    image: confluentinc/cp-zookeeper:5.4.3
    ports:
      - ${ZOOKEEPER_EXTERNAL_PORT-2181}:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT-32181}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME-2000}

  kafka:
    <<: *container-common
    image: confluentinc/cp-kafka:5.4.3
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_EXTERNAL_PORT-9092}:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_NUM_PARTITIONS: ${KAFKA_NUM_PARTITIONS-3}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT-32181}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://${KAFKA_EXTERNAL_HOSTNAME-localhost}:${KAFKA_EXTERNAL_PORT-9092}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics",
          "--list",
          "--bootstrap-server",
          "kafka:9092"
        ]
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 5s

  postgres:
    <<: *container-common
    image: postgres:13.4-alpine
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD-postgres}
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - 5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 1s
      timeout: 1s
      retries: 5

volumes:
  db-data:
    driver: local

networks:
  deps:
    name: deps_quorum-dev-quickstart
    driver: bridge
